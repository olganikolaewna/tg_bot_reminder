from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import pytz
from timezonefinder import TimezoneFinder
from datetime import datetime

import app.keyboards as kb
from aiogram.types import ReplyKeyboardRemove

import app.database.requests as rq
router = Router()

class Registration(StatesGroup):
    waiting_for_location = State()
    waiting_for_timezone = State()

#–∫–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    await state.update_data(
        user_id=message.from_user.id,
        username = username,
        created_at = datetime.now()
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=kb.location  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await state.set_state(Registration.waiting_for_location)



@router.message(Registration.waiting_for_location, F.location)
async def handle_location(message: Message, state: FSMContext):
    try:
        loc = message.location
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lat=loc.latitude, lng=loc.longitude)
        if not timezone_str:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")

        timezone = timezone_str

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.full_name
        created_at = datetime.now()

        is_update = await rq.user_exists(user_id=user_id)
        await rq.set_user(
            user_id=user_id,
            username=username,
            created_at=created_at,
            timezone=timezone
        )

        if is_update:
            text = f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n–¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}"
        else:
            text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º!"

        await message.answer(text, reply_markup=ReplyKeyboardRemove())
        await state.clear()

        await message.answer("–Ø –±–æ—Ç —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º!", reply_markup=kb.main)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –í–≤–µ–¥–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: GMT+3):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Registration.waiting_for_timezone)


#–ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def help(message: Message):
    await message.answer("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")


#–ö–æ–º–∞–Ω–¥–∞ /edit_location
@router.message(Command("edit_location"))
async def edit_location(message: Message, state: FSMContext):
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        reply_markup=kb.location
    )
    await state.set_state(Registration.waiting_for_location)


#–ö–æ–º–∞–Ω–¥–∞ /about_me
@router.message(Command("about_me"))
async def about_me(message: Message):
    text = ("‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö (–æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤, –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤, –∑–≤–æ–Ω–æ–∫ –º–∞–º–µ)\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ (—Å–ø–æ—Ä—Ç, —á—Ç–µ–Ω–∏–µ, –≤–æ–¥–∞)\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è —É—Å–ø–µ—Ö–∞–º –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π üéâ\n\n"
        "üìå <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1. –°–æ–∑–¥–∞–µ—à—å –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "2. –ü–æ–ª—É—á–∞–µ—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "3. –û—Ç–º–µ—á–∞–µ—à—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —è –∑–∞–ø–æ–º–∏–Ω–∞—é\n"
        "4. –°–º–æ—Ç—Ä–∏—à—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ª—É—á—à–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n")
    await message.answer(text, reply_markup= kb.main)


#–ö–æ–º–∞–Ω–¥–∞ /add_remind

class AddReminder(StatesGroup):
    waiting_for_title = State()
    waiting_for_time = State()
    waiting_for_description = State()
    waiting_for_frequency = State()
    #waiting_for_weekdays = State()


@router.callback_query(F.data == "add_reminder")
async def add_reminder(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É")
    await state.set_state(AddReminder.waiting_for_title)
    await callback.answer()

@router.message(AddReminder.waiting_for_title)
async def get_title(message: Message, state: FSMContext):
    await state.update_data(title = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–ù:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00):")
    await state.set_state(AddReminder.waiting_for_time)

@router.message(AddReminder.waiting_for_time)
async def get_time(message: Message, state: FSMContext):
    try:
        hour, minute = map(int, message.text.split(":"))
        time_obj = datetime.now().replace(hour = hour, minute = minute, second = 0, microsecond=0).time()
        await state.update_data(reminder_time = time_obj)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        await state.set_state(AddReminder.waiting_for_description)
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–ù:–ú–ú")

@router.message(AddReminder.waiting_for_description)
async def get_desc(message: Message, state: FSMContext):
    await state.update_data(description = message.text)
    await message.answer("–û–¥–∏–Ω —Ä–∞–∑ –∏–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?", reply_markup=kb.freq_kb())
    await state.set_state(AddReminder.waiting_for_frequency)


@router.callback_query(AddReminder.waiting_for_frequency)
async def get_freq(callback: CallbackQuery, state: FSMContext):
    mapping = {
        "freq_once": "once",
        "freq_daily": "daily",
        "freq_weekly": "weekly"
    }
    freq_key = callback.data
    frequency = mapping.get(freq_key)

    if not frequency:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    data = await state.get_data()
    await rq.save_reminder(
        user_id = callback.from_user.id,
        title = data["title"],
        reminder_time = data["reminder_time"],
        description = data["description"],
        frequency = frequency
    )
    await callback.message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=kb.main)
    await state.clear()
    await callback.answer()

















































# @router.message(Command('help'))
# async def get_help(message: Message):
#     await message.answer('–ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?')

# @router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?')
# async def how_are_you(message: Message):
#     await message.answer('–û—Ç–ª–∏—á–Ω–æ!!')

# @router.callback_query(F.data == 'add_habit')
# async def add(callback: CallbackQuery):
#     await callback.answer('')
#     await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö', reply_markup= await kb.inline_habit())

# @router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')
# async def add_h(message: Message):
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö', reply_markup= await kb.inline_habit())

# @router.message(Command('reg'))
# async def reg_one(message: Message, state: FSMContext):
#     await state.set_state(Reg.name)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')

# @router.message(Reg.name)
# async def reg_two(message: Message, state: FSMContext):
#     await state.update_data(name = message.text)
#     await state.set_state(Reg.number)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä')

# @router.message(Reg.number)
# async def reg_three(message: Message, state: FSMContext):
#     await state.update_data(number = message.text)
#     data = await state.get_data()
#     await message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. \n–ò–º—è: {data["name"]}\n–ù–æ–º–µ—Ä: {data["number"]}')
#     await state.clear()